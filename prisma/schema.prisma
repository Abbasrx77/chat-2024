// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  firstname String    @db.String()
  lastname  String    @db.String()
  photoUrl  String?   @db.String()
  status    String?   @db.String()
  email     String    @unique @db.String()
  hash      String    @db.String()
  salt      String    @db.String()
  members   Member[]
  Message   Message[]
}

// TODO: Modify after to add a relation with user 1 and 2 object and refactor the controller
model Contact {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  user1Id      String  @db.ObjectId
  addedAt      Int
  user1Blocked Boolean @default(false)
  user2Blocked Boolean @default(false)
  status       String  @default("PENDING") @db.String
  user2Id      String  @db.ObjectId
}

model Discussion {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @db.String()
  description String    @db.String()
  tag         Tag
  createdBy   String    @db.ObjectId
  photoUrl    String?   @db.String()
  createdAt   Int
  updatedAt   Int
  members     Member[]
  lastMessage Message[]
  survey      Survey[]
}

enum Tag {
  GROUP
  PRIVATE
}

model Member {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  isPinned     Boolean    @default(false)
  hasNewNotif  Boolean    @default(true)
  isMuted      Boolean    @default(false)
  isAdmin      Boolean    @default(false)
  isArchived   Boolean    @default(false)
  addedAt      Int
  discussionId String     @db.ObjectId
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Message {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  text            String?     @db.String
  senderId        String      @db.ObjectId
  surveyId        String?     @db.ObjectId
  responseToMsgId String?     @db.ObjectId
  file            File?
  reactions       Reactions[]
  createdAt       Int
  Discussion      Discussion  @relation(fields: [discussionId], references: [id])
  sender          User        @relation(fields: [senderId], references: [id])
  discussionId    String      @db.ObjectId
}

model File {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String  @db.String
  pathUrl   String  @db.String
  size      Float
  type      String  @db.String
  Message   Message @relation(fields: [messageId], references: [id])
  messageId String  @unique @db.ObjectId
}

model Reactions {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  emoji     String  @db.String
  Message   Message @relation(fields: [messageId], references: [id])
  messageId String  @unique @db.ObjectId
}

model Survey {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  question     String
  discussionId String     @db.ObjectId
  creatorId    String     @db.ObjectId
  createdAt    Int
  endedAt      Int?
  Discussion   Discussion @relation(fields: [discussionId], references: [id])
  Options      Options[]
}

model Options {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  response String
  voters   String[]
  Survey   Survey   @relation(fields: [surveyId], references: [id])
  surveyId String   @db.ObjectId
}
